id: variable_qtgui_chooser
label: QT GUI Chooser
flags: has_python

parameters:
-   id: label
    label: Label
    dtype: string
    hide: ${ ('none' if label else 'part') }
-   id: type
    label: Type
    dtype: enum
    default: int
    options: [real, int, string, raw]
    option_labels: [Float, Integer, String, Any]
    hide: part
-   id: num_opts
    label: Num Options
    dtype: enum
    default: '3'
    options: ['0', '1', '2', '3', '4', '5']
    option_labels: [List, '1', '2', '3', '4', '5']
-   id: value
    label: Default Value
    dtype: ${ type }
    default: '0'
-   id: options
    label: Options
    dtype: raw
    default: '[0, 1, 2]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: labels
    label: Labels
    dtype: raw
    default: '[]'
    hide: ${ ('all' if int(num_opts) else 'none') }
-   id: option0
    label: Option 0
    dtype: ${ type }
    default: '0'
    hide: ${ ('none' if int(num_opts) > 0 else 'all') }
-   id: label0
    label: Label 0
    dtype: string
    hide: ${ (int(num_opts) > 0) and (label0 and 'none' or 'part') or 'all' }
-   id: option1
    label: Option 1
    dtype: ${ type }
    default: '1'
    hide: ${ ('none' if int(num_opts) > 1 else 'all') }
-   id: label1
    label: Label 1
    dtype: string
    hide: ${ (int(num_opts) > 1) and (label1 and 'none' or 'part') or 'all' }
-   id: option2
    label: Option 2
    dtype: ${ type }
    default: '2'
    hide: ${ ('none' if int(num_opts) > 2 else 'all') }
-   id: label2
    label: Label 2
    dtype: string
    hide: ${ (int(num_opts) > 2) and (label2 and 'none' or 'part') or 'all' }
-   id: option3
    label: Option 3
    dtype: ${ type }
    default: '3'
    hide: ${ ('none' if int(num_opts) > 3 else 'all') }
-   id: label3
    label: Label 3
    dtype: string
    hide: ${ (int(num_opts) > 3) and (label3 and 'none' or 'part') or 'all' }
-   id: option4
    label: Option 4
    dtype: ${ type }
    default: '4'
    hide: ${ ('none' if int(num_opts) > 4 else 'all') }
-   id: label4
    label: Label 4
    dtype: string
    hide: ${ (int(num_opts) > 4) and (label4 and 'none' or 'part') or 'all' }
-   id: widget
    label: Widget
    dtype: enum
    default: combo_box
    options: [combo_box, radio_buttons]
    option_labels: [Combo Box, Radio Buttons]
    hide: part
-   id: orient
    label: Orientation
    dtype: enum
    default: Qt.QVBoxLayout
    options: [Qt.QHBoxLayout, Qt.QVBoxLayout]
    option_labels: [Horizontal, Vertical]
    hide: ${ ('part' if widget == 'radio_buttons' else 'all') }
-   id: gui_hint
    label: GUI Hint
    dtype: gui_hint
    hide: part
value: ${ value }

templates:
    imports: |-
        from PyQt5 import Qt
        from PyQt5.QtCore import QObject, pyqtSlot
    var_make: self.${id} = ${id} = ${value}
    callbacks:
    - self.set_${id}(${value})
    - self._${id}_callback(${id})

documentation: |-
    This block creates a variable with enumerated options. The gui widget is implemented as a combo box or radio button group. Leave the label blank to use the variable id as the label.

    Choose the number of options available to your chooser. When the label is left blank, the option will be used as the label. Set the number of options to "list" to enter a single list of options and labels. When the labels is an empty list, the options will be used as the label.

    The GUI hint can be used to position the widget within the application. The hint is of the form [tab_id@tab_index]: [row, col, row_span, col_span]. Both the tab specification and the grid position are optional.

file_format: 1
